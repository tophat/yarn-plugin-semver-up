/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-semver-up",
factory: function (require) {var plugin;(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>s});const n=require("@yarnpkg/core"),o=require("@yarnpkg/fslib"),a=require("clipanion"),i={allowMajor:!1,allowMinor:!0,allowPatch:!0,maxPackagesUpdated:1};class r extends a.Command{constructor(){super(...arguments),this.configFile=a.Option.String("--config",{required:!1})}async execute(){try{const e=await n.Configuration.find(this.context.cwd,this.context.plugins),{project:t}=await n.Project.find(e,this.context.cwd);await t.restoreInstallState();const o=await this.parseConfigFile();return await this.getUpdateCandidates(o,t.topLevelWorkspace.manifest),this.context.stdout.write("Done\n"),0}catch(e){return this.context.stderr.write(String(e)+"\n"),1}}async parseConfigFile(){const e=this.configFile?this.configFile:".semver-up.json",t=o.ppath.resolve(o.ppath.cwd(),o.npath.toPortablePath(e));let a={};try{a=n.miscUtils.dynamicRequireNoCache(t)}catch(e){this.context.stdout.write(".semver-up.json file not detected, using default config\n")}const r={...i,...a};if(!r.allowMajor&&!r.allowMinor&&!r.allowPatch)throw new Error("One of [allowMajor, allowMinor, allowPatch] must be set to true");return this.context.stdout.write(`Using config: ${JSON.stringify(r,null,4)}\n`),r}async getUpdateCandidates(e,t){const n=[],o=[...t.dependencies.values(),...t.devDependencies.values()];if(e.packagePrefix)for(const t of o)t.name.startsWith(e.packagePrefix)&&n.push(t);else n.push(...o);return this.context.stdout.write(`Candidate packages for upgrade are:\n${n.map(e=>e.name).join("\n")}\n`),n}}r.paths=[["semver","up"]],r.usage=a.Command.Usage({description:"",details:"",examples:[]});const s={hooks:{},commands:[r]};plugin=t})();return plugin;
}
};